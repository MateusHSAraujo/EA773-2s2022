// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/18/2022 09:36:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decod_inst_dsv
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decod_inst_dsv_vlg_sample_tst(
	CLK,
	flags,
	op,
	RESET,
	SEL,
	sampler_tx
);
input  CLK;
input [3:0] flags;
input [3:0] op;
input  RESET;
input  SEL;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or flags or op or RESET or SEL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decod_inst_dsv_vlg_check_tst (
	BOP,
	LDCNT,
	SXCPC,
	sampler_rx
);
input  BOP;
input  LDCNT;
input  SXCPC;
input sampler_rx;

reg  BOP_expected;
reg  LDCNT_expected;
reg  SXCPC_expected;

reg  BOP_prev;
reg  LDCNT_prev;
reg  SXCPC_prev;

reg  BOP_expected_prev;
reg  LDCNT_expected_prev;
reg  SXCPC_expected_prev;

reg  last_BOP_exp;
reg  last_LDCNT_exp;
reg  last_SXCPC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	BOP_prev = BOP;
	LDCNT_prev = LDCNT;
	SXCPC_prev = SXCPC;
end

// update expected /o prevs

always @(trigger)
begin
	BOP_expected_prev = BOP_expected;
	LDCNT_expected_prev = LDCNT_expected;
	SXCPC_expected_prev = SXCPC_expected;
end



// expected SXCPC
initial
begin
	SXCPC_expected = 1'bX;
end 

// expected LDCNT
initial
begin
	LDCNT_expected = 1'bX;
end 

// expected BOP
initial
begin
	BOP_expected = 1'bX;
end 
// generate trigger
always @(BOP_expected or BOP or LDCNT_expected or LDCNT or SXCPC_expected or SXCPC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BOP = %b | expected LDCNT = %b | expected SXCPC = %b | ",BOP_expected_prev,LDCNT_expected_prev,SXCPC_expected_prev);
	$display("| real BOP = %b | real LDCNT = %b | real SXCPC = %b | ",BOP_prev,LDCNT_prev,SXCPC_prev);
`endif
	if (
		( BOP_expected_prev !== 1'bx ) && ( BOP_prev !== BOP_expected_prev )
		&& ((BOP_expected_prev !== last_BOP_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BOP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BOP_expected_prev);
		$display ("     Real value = %b", BOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BOP_exp = BOP_expected_prev;
	end
	if (
		( LDCNT_expected_prev !== 1'bx ) && ( LDCNT_prev !== LDCNT_expected_prev )
		&& ((LDCNT_expected_prev !== last_LDCNT_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LDCNT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LDCNT_expected_prev);
		$display ("     Real value = %b", LDCNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LDCNT_exp = LDCNT_expected_prev;
	end
	if (
		( SXCPC_expected_prev !== 1'bx ) && ( SXCPC_prev !== SXCPC_expected_prev )
		&& ((SXCPC_expected_prev !== last_SXCPC_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SXCPC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SXCPC_expected_prev);
		$display ("     Real value = %b", SXCPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SXCPC_exp = SXCPC_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#4000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decod_inst_dsv_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [3:0] flags;
reg [3:0] op;
reg RESET;
reg SEL;
// wires                                               
wire BOP;
wire LDCNT;
wire SXCPC;

wire sampler;                             

// assign statements (if any)                          
decod_inst_dsv i1 (
// port map - connection between master ports and signals/registers   
	.BOP(BOP),
	.CLK(CLK),
	.flags(flags),
	.LDCNT(LDCNT),
	.op(op),
	.RESET(RESET),
	.SEL(SEL),
	.SXCPC(SXCPC)
);
// op[ 3 ]
initial
begin
	op[3] = 1'b1;
end 
// op[ 2 ]
initial
begin
	op[2] = 1'b1;
end 
// op[ 1 ]
initial
begin
	op[1] = 1'b1;
end 
// op[ 0 ]
initial
begin
	op[0] = 1'b1;
end 
// flags[ 3 ]
always
begin
	flags[3] = 1'b0;
	flags[3] = #2000000 1'b1;
	#2000000;
end 
// flags[ 2 ]
always
begin
	flags[2] = 1'b0;
	flags[2] = #1000000 1'b1;
	#1000000;
end 
// flags[ 1 ]
always
begin
	flags[1] = 1'b0;
	flags[1] = #500000 1'b1;
	#500000;
end 
// flags[ 0 ]
always
begin
	flags[0] = 1'b0;
	flags[0] = #250000 1'b1;
	#250000;
end 

// SEL
initial
begin
	SEL = 1'b1;
	SEL = #1250000 1'b0;
	SEL = #1500000 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #62500 1'b1;
	#62500;
end 

// RESET
initial
begin
	RESET = 1'b0;
end 

decod_inst_dsv_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.flags(flags),
	.op(op),
	.RESET(RESET),
	.SEL(SEL),
	.sampler_tx(sampler)
);

decod_inst_dsv_vlg_check_tst tb_out(
	.BOP(BOP),
	.LDCNT(LDCNT),
	.SXCPC(SXCPC),
	.sampler_rx(sampler)
);
endmodule

